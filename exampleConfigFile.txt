########################################################################################
########################	Example config file   ######################################
####################### Lines starting at # are ignored ################################
########################################################################################

# This is a directory where data files are stored. It is relative to the user's working directory.
dataDirectory data

# Time at which Genotick should start its simulation / training.
# Leave commented out to start the simulation at the first available time point.
startTimePoint	20000101

# Time at which the simulation / training ends.
# Leave commented out to end the simulation at the last available time point.
endTimePoint	20150101

# Path to a directory of existing robot files. It must be a valid and readable directory.
# If commented out, then training will be done in RAM - so obviously 
# no prediction is possible in this mode (you need a population to make a prediction).  
# Using a directory path while training will make Genotick a lot slower but will 
# allow for a much larger population.
#populationDAO	/change/this/path

# If true, Genotick will perform a full training.
# If false, then only a prediction is given. The population and robot weights are neither trained nor updated.
performTraining true

# Desired size for the population. Should be at least in the thousands to get satisfactory results.
# The more the merrier.
populationDesiredSize	1000

# This setting prevents robots to run forever. The given number is used to calculate the
# maximum instructions that can be executed for a robot on each TimePoint for each data file.
# The current algorithm is simply: processorInstructionLimit * robotLength
processorInstructionLimit	256

# This setting is used to calculate how many robots are considered to be removed based on their age.
maximumDeathByAge	0.01

# This setting is used to calculate how many robots are considered to be removed based on their weight.
maximumDeathByWeight	0.01

# The probability of removing a robot because it is too old.
probabilityOfDeathByAge	0.5

# The probability of removing a robot because its weight is too close to 0.
# Currently, removal by weight happens only if there is no more space to breed in the population.
probabilityOfDeathByWeight	0.5

# When a child robot is born its weight is zero because it has no predictions yet. 
# This setting enables the child robot to inherit a percentage (in range 0..1) of its parents' average weight.
# This is done to protect new robots from getting removed when they had a few predictions only.
inheritedChildWeight	0

# Value of how far a robot can read data into the past. Set it to something reasonable, depending on your time frame.
dataMaximumOffset	256

# Value for how long a new robot is protected and cannot be removed.
# This setting has no effect if it violates 'killNonPredictingRobots' and 'requireSymmetricalRobots'.
# Number of outcomes increments by one for every data on every time point.
protectRobotsUntilOutcomes	100

# The probability of spawning new instructions when making a child.
newInstructionProbability	0.01

# The probability of mutating existing instructions when making a child.
instructionMutationProbability	0.01

# The probability of skipping an instruction when making a child. Preferably set very close to newInstructionProbability, 
# otherwise robots will either shrink and potentially become useless or grow uncontrollably and potentially execute for a long time.
skipInstructionProbability	0.01

# The number of outcomes required for a robot to breed its first child robot.
minimumOutcomesToAllowBreeding	50

# The number of outcomes required for a parent robot to breed another child.
minimumOutcomesBetweenBreeding	50

# If true, then robots that make no prediction will be removed immediately,
# regardless of the protection implied by 'protectUntilOutcomes'
killNonPredictingRobots	true

# The number of totally new and random robots to be added at each time point (as a fraction of PopulationDesiredSize). 
# Robots are added even if the population is full.
randomRobotsAtEachUpdate	0.02

# The number of the best robots to protect (as a fraction of PopulationDesiredSize). 
protectBestRobots	0.02

# If true, robots are removed as soon as their predictions (UP, DOWN) on regular data sets
# do not match reversed predictions on reversed data sets.
# This setting should be used only if every data file has its reversed equivalent.
# This setting ignores 'protectUntilOutcomes'.
requireSymmetricalRobots	true

# This prevents Genotick from trading if Long (UP) votes are too close to Short (DOWN) votes.
# The majority weight is divided by this number and still has to be larger than the minority weight.
# By default this is set to 1, so even small differences can tilt the direction.
# For example setting this number to 2 means that the majority weight has to be at least 2 times larger
# than the minority weight. Numbers below 1 make no sense.
resultThreshold 1

# This tells Genotick to ignore the first N columns for learning.
# The 'open' column will be used for trading regardless. 
# Example column count (date, open, high, low, close, volume):
# 20160222, 100, 101, 99, 103, 42
# 0         1    2    3   4    5
# If 'ignoreColumns' is 3 then only the 4th and 5th columns (close and volume) will be used for learning.
ignoreColumns 0
